<?xml version="1.0"?>
<language id="yang" _name="YANG" version="2.0" _section="Others"><metadata><property name="mimetypes">application/yang</property><property name="globs">*.yang</property><property name="line-comment-start">//</property><property name="block-comment-start">/*</property><property name="block-comment-end">*/</property></metadata><styles><style id="comment" _name="Comment" map-to="def:comment"/><style id="doc-comment" _name="Documentation comment" map-to="def:doc-comment"/><style id="doc-stmt" _name="Documentation statement" map-to="def:doc-comment-element"/><style id="string" _name="String" map-to="def:string"/><style id="number" _name="Number" map-to="def:number"/><style id="keyword1" _name="Keyword 1" map-to="def:keyword"/><style id="keyword2" _name="Keyword 2" map-to="def:statement"/><style id="operator" _name="Operator" map-to="def:operator"/><style id="type" _name="Data Type" map-to="def:type"/><style id="special" _name="Special" map-to="def:special-constant"/><style id="error" _name="Error" map-to="def:error"/><style id="mark" _name="Debug mark" map-to="def:underlined"/></styles><definitions><define-regex id="identifier-base" extended="true">[\w_][-\w_\.0-9]*</define-regex><define-regex id="identifier" extended="true">['"]?\b\%{identifier-base}\b['"]?</define-regex><define-regex id="identifier-with-ns" extended="true">\b['"]?(\%{identifier-base}:)?\%{identifier-base}['"]?\b</define-regex><define-regex id="qualified-identifier" extended="true">\b['"]?\%{identifier-base}:\%{identifier-base}['"]?\b</define-regex><define-regex id="date" extended="true">\b[0-9]{4}-[01][0-9]-[0-3][0-9]\b</define-regex><define-regex id="extension" extended="true">\%{qualified-identifier}</define-regex><context id="extensions"><start extended="true">\%{extension}</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="extension-argument"><start>\s+</start><end>(?=;|{)</end></context><context id="extension-substatements"><start>{</start><end>(?=;|})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="string"><include><context id="single-quoted-string" style-ref="string"><start>'</start><end>'</end><include><context ref="def:in-comment"/></include></context><context id="double-quoted-string" style-ref="string"><start>"</start><end>(?&lt;!\\)"</end><include><context ref="def:in-comment"/></include></context><context id="unquoted-string" style-ref="string"><match extended="true">[^'";{}+\s]+(\s+[^+;{])?</match><include><context sub-pattern="1" style-ref="error"/></include></context><context id="concat-string" style-ref="operator"><match>\+</match></context><context ref="def:c-like-comment"/><context ref="def:c-like-comment-multiline"/><context ref="def:c-like-close-comment-outside-comment"/><context ref="wserror"/></include></context><context id="types" style-ref="type"><keyword>(u)?int(8|16|32|64)</keyword><keyword>decimal64</keyword><keyword>string</keyword><keyword>boolean</keyword><keyword>enumeration</keyword><keyword>bits</keyword><keyword>binary</keyword><keyword>leafref</keyword><keyword>identityref</keyword><keyword>empty</keyword><keyword>union</keyword><keyword>instance-identifier</keyword></context><context id="wserror" style-ref="error"><match>\s+$</match></context><context id="stmt-error" style-ref="error"><match extended="true">\%{identifier-with-ns}</match></context><context id="common"><include><context ref="def:c-like-comment"/><context ref="def:c-like-comment-multiline"/><context ref="def:c-like-close-comment-outside-comment"/><context ref="stmt-error"/><context ref="wserror"/></include></context><context id="module" once-only="true"><start extended="true">\b(module|submodule)\s+(\%{identifier})</start><end>}</end><include><context sub-pattern="1" where="start" style-ref="keyword1"/><context sub-pattern="2" where="start" style-ref="special"/><context ref="yang-version"/><context ref="namespace"/><context ref="prefix"/><context ref="import"/><context ref="include"/><context ref="revision"/><context ref="belongs-to"/><context ref="typedef"/><context ref="module-doc"/><context ref="extensions"/><context ref="common"/></include></context><context id="yang-version" once-only="true"><start extended="true">\byang-version\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="yang-version-argument" style-ref="number"><start extended="true">1</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="yang-version-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="namespace" once-only="true"><start extended="true">\bnamespace\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="namespace-argument"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="namespace-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="prefix" once-only="true"><start extended="true">\bprefix\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="prefix-argument" style-ref="special"><start extended="true">\%{identifier}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="prefix-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="revision-date" once-only="true"><start extended="true">\brevision-date\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="revision-date-argument" style-ref="number"><start extended="true">\%{date}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="revision-date-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="import"><start extended="true">\bimport\b</start><end>}</end><include><context sub-pattern="0" where="start" style-ref="keyword1"/><context id="import-argument" style-ref="special"><start extended="true">\%{identifier}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="import-substatements"><start>{</start><end>(?=})</end><include><context ref="prefix"/><context ref="revision-date"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="include"><start extended="true">\binclude\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword1"/><context id="include-argument" style-ref="special"><start extended="true">\%{identifier}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="include-substatements"><start>{</start><end>(?=})</end><include><context ref="revision-date"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="revision"><start extended="true">\brevision\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="revision-argument" style-ref="number"><start extended="true">\%{date}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="revision-substatements"><start>{</start><end>(?=})</end><include><context ref="doc"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="belongs-to" once-only="true"><start extended="true">\bbelongs-to\b</start><end>}</end><include><context sub-pattern="0" where="start" style-ref="keyword1"/><context id="belongs-to-argument" style-ref="special"><start extended="true">\%{identifier}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="belongs-to-substatements"><start>{</start><end>(?=})</end><include><context ref="prefix"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="doc"><start extended="true">\b(description|reference|status)\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="doc-stmt"/><context id="doc-argument" style-ref="doc-comment"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="doc-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="module-doc"><start extended="true">\b(description|contact|organization|reference)\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="doc-stmt"/><context id="module-doc-argument" style-ref="doc-comment"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="module-doc-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="units" once-only="true"><start extended="true">\bunits\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="doc-stmt"/><context id="units-argument" style-ref="doc-comment"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="units-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="error-msg"><start extended="true">\b(error-message|error-app-tag)\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="error-msg-argument"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="error-msg-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="default" once-only="true"><start extended="true">\bdefault\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="default-argument"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="default-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="typedef"><start extended="true">\btypedef\b</start><end>}</end><include><context sub-pattern="0" where="start" style-ref="keyword1"/><context id="typedef-argument" style-ref="special"><start extended="true">\%{identifier}</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="typedef-substatements"><start>{</start><end>(?=})</end><include><context ref="type"/><context ref="units"/><context ref="default"/><context ref="doc"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="type"><start extended="true">\btype\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="type-argument"><start>\s+</start><end>(?=;|{)</end><include><context ref="types"/><context id="type-argument-match" style-ref="special"><match extended="true">\%{identifier-with-ns}</match></context><context ref="types"/><context id="type-custom-name" style-ref="special"><match extended="true">\%{identifier-with-ns}</match></context><context ref="common"/></include></context><context id="type-substatements"><start>{</start><end>(?=})</end><include><context ref="type"/><context ref="type-properties"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="type-properties"><start extended="true">\b(base|bit|enum|length|path|pattern|range|require-instance)\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="type-properties-argument"><start>\s+</start><end>(?=;|{)</end><include><context ref="string"/></include></context><context id="type-properties-substatements"><start>{</start><end>(?=})</end><include><context ref="position"/><context ref="error-msg"/><context ref="doc"/><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="position"><start extended="true">\bposition\b</start><end>;|}</end><include><context sub-pattern="0" where="start" style-ref="keyword2"/><context id="position-argument" style-ref="number"><start extended="true">\d+</start><end>(?=;|{)</end><include><context ref="common"/></include></context><context id="position-substatements"><start>{</start><end>(?=})</end><include><context ref="extensions"/><context ref="common"/></include></context><context ref="common"/></include></context><context id="yang" class="no-spell-check"><include><context ref="def:c-like-comment"/><context ref="def:c-like-comment-multiline"/><context ref="def:c-like-close-comment-outside-comment"/><context ref="module"/><context ref="stmt-error"/><context ref="wserror"/></include></context></definitions></language>
